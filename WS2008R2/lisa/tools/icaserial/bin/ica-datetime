#!/usr/bin/env python
# -*- coding: utf-8 -*-
#####################################################################
#
# This is the script to allow we set datetime for VM. The goal for this
# script is to make sure we are not affected by the different format of
# date commands between FreeBSD and Linux.
#
# Supported command line:
#
#     ica-datetime set dt=hhmmMMddyyyy
#     ica-datetime get
#
#####################################################################
import re
import os
import sys
import subprocess
import icatest
import icatest.daemon
import icatest.errors

args = len(sys.argv)
if args != 3 and args != 2:
    print ("Invalid parameter")
    print ("Usage: %s set datetime=HHMMmmddYYYY" % sys.argv[0])
    print ("       %s get" % sys.argv[0])
    sys.exit(icatest.errors.ERROR_INVALID_PARAMETER)

# Format: HHMMmmddYYYY
datetime_format = "+%H%M%m%d%Y"

bin_path = "/usr/bin/env"
if not os.path.exists(bin_path):
    print ("No env command")
    sys.exit(icatest.errors.ERROR_FILE_NOT_FOUND)
if not os.path.isfile(bin_path):
    print ("env is not a file")
    sys.exit(icatest.errors.ERROR_BAD_ENVIRONMENT)
if not os.access(bin_path, os.X_OK):
    print ("env is not executable")
    sys.exit(icatest.errors.ERROR_BAD_ENVIRONMENT)

verb = sys.argv[1].lower()
if verb == "get":
    cmdline = [bin_path, "date", datetime_format]
    try:
        date = subprocess.Popen(cmdline,
                                stdout=subprocess.PIPE,
                                stderr=subprocess.PIPE)
        return_code = date.wait()
        output = date.stdout.read().decode('utf-8')
        error = date.stderr.read().decode('utf-8')
        if return_code == icatest.errors.ERROR_SUCCESS:
            print (output.split("\n")[0])
        else:
            print ("date fail: code = %d, output = %s" % \
                    (return_code, error.split("\n")[0]))
            return_code = ERROR_BAD_ENVIRONMENT
        sys.exit(return_code)
    except Exception:
        print ("Failed to run 'date'")
        sys.exit(icatest.errors.ERROR_BAD_ENVIRONMENT)
elif verb == "set":
    if args != 3:
        print ("Missing parameter: datetime=HHMMmmddYYYY")
        sys.exit(icatest.errors.ERROR_INVALID_PARAMETER)
    params = icatest.daemon.parse_params(sys.argv[2], False)
    if params is None:
        print ("Bad parameter format: %s" % sys.argv[2])
        sys.exit(icatest.errors.ERROR_INVALID_PARAMETER)

    newval = params.get("datetime")
    if newval is None:
        print ("Missing parameter: datetime=HHMMmmddYYYY")
        sys.exit(icatest.errors.ERROR_INVALID_PARAMETER)
    datetime_pattern = re.compile("^(\d\d)(\d\d)(\d\d)(\d\d)(\d\d\d\d)$")
    match = datetime_pattern.match(newval)
    if match is None:
        print ("Bad parameter: datetime=HHMMmmddYYYY")
        sys.exit(icatest.errors.ERROR_INVALID_PARAMETER)

    hour = int(match.group(1))
    minute = int(match.group(2))
    month = int(match.group(3))
    day = int(match.group(4))
    year = int(match.group(5))

    try:
        code, msg = icatest.platform_lib.set_datetime(hour=hour,
                                                      minute=minute,
                                                      month=month,
                                                      day=day,
                                                      year=year)
        if code == icatest.errors.ERROR_SUCCESS:
            print ("%02d%02d%02d%02d%04d" % \
                    (hour, minute, month, day, year))
        else:
            print (msg)
        sys.exit(code)
    except Exception:
        print ("Failed to run 'date'")
        sys.exit(icatest.errors.ERROR_BAD_ENVIRONMENT)

# vim: ff=unix expandtab shiftwidth=4
